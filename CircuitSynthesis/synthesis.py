from dataclasses import dataclass
from typing import Tuple, List
from CircuitSynthesis.PinDetection.pindetection import Component
import PinDetection.pindetection as pd
from squigglylines import * 

import random
import numpy as np

class CirCmp:
    type_id: str
    cmp: Component
    pos: np.ndarray
    connections: List[Tuple]

    def __init__(self, type_id, cmp, pos):
        self.connections = []
        self.type_id = type_id
        self.cmp = cmp
        self.pos = pos




def bridgecircuit(componentsize):
    pass

def starcircuit(componentsize):
    pass
def deltacircuit(componentsize):
    pass

def structurize(structure, partcount):
    if isinstance(structure[-1], SynthLine):

        structure.append()

def main():
    components = pd.import_components('./exported_data/data.json')
    mu = 20 #m√º is the amount of average parts
    sigma = 5 #sigma is standart deviation

    partamount = int(np.random.normal(mu, sigma, 1))
    partcount = 0
    if partamount < 3:
        partamount = 3

    componentSize = int(random.randint(64,256))

    # randomly select if it should be a Component Line or SubComponent
    #note: knots will be defined after all lines and comps are generated by checking if one of tier cordinates is equal 
    structure = []

    
    
    

if __name__ == '__main__':
    main()